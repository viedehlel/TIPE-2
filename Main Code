import matplotlib.pyplot as plt
import math as ma

def Ressort(x,vx,u,vu,dt,durée,f,m,m1,k,k1,h1):
    
    plt.close()
    X = [x] #Liste des positions
    VX = [vx] #Liste des vitesses
    U = [u] #Liste des positions
    VU = [vu] #Liste des vitesses
    T = [0]  #Liste des temps
    #Em = [(1/2)*(m*v0**2 + k*(x0-l0)**2)]
    t=0
    
    while t<=durée:
        x = x + vx * dt
        u = u + vu * dt
        
        ax = (k1*u + h1 * vu - k*x +f)/m
        au = (-(m+m1)*ax - k*x + f)/m1
        
        vx = vx + ax*dt
        vu = vu + au*dt
        
        t+=dt
        X.append(x)
        VX.append(vx)
        U.append(u)
        VU.append(vu)
        T.append(t)
        #Em.append((1/2)*(m*v**2 + k*(x-l0)**2))
    
    plt.plot(T,X,'r')
    fig = plt.figure()
    plt.plot(T,U,'b')
    #fig = plt.figure()
    #plt.plot(T,Em,'purple')
    # fig = plt.figure()
    # plt.plot(X,VX,'m')
    print(T[-1])
    print(X)
    plt.show()
    

def RessortSansPendule(x,vx,dt,durée,A,omega,m,k):
    
    plt.close()
    X = [x] #Liste des positions
    VX = [vx] #Liste des vitesses
    T = [0]  #Liste des temps
    #Em = [(1/2)*(m*v0**2 + k*(x0-l0)**2)]
    t=0
    
    while t<=durée:
        x = x + vx * dt
        
        ax = (- k*x +A*m.cos(omega*t))/m
        
        vx = vx + ax*dt
        
        t+=dt
        X.append(x)
        VX.append(vx)
        T.append(t)
        #Em.append((1/2)*(m*v**2 + k*(x-l0)**2))
    
    plt.plot(T,X,'r')
    fig = plt.figure()
    #fig = plt.figure()
    #plt.plot(T,Em,'purple')
    # fig = plt.figure()
    # plt.plot(X,VX,'m')
    print(T[-1])
    print(X)
    plt.show()
    
def Bode(m,k,NbPoints):
    plt.close()
    omega = 0
    pas = 1.2*k/NbPoints
    Om = [0]
    Ampl = [1/k]
    while omega <(1.2*k):
        omega += pas
        if k-omega**2 != 0:
            Om.append(omega)
            Ampl.append(1/(k-omega**2))
    plt.plot(Om,Ampl)
    plt.show()
    
def BodeZ(etha,alpha,beta,NbPoints):
    plt.close()
    pas = 1.4/NbPoints
    z = -pas
    Z = []
    Ampl = []
    while z <(1.4):
        z += pas
        
        Z.append(z)
        Ampl.append(abs( z**2 / abs((1+alpha*(1+ (z**2/(-z**2+2j*etha*beta*z + beta**2)) ))*z**2-1)))
    plt.plot(Z,Ampl)
    plt.show()
    
def BodeBeauZ(n,alpha,beta,NbPoints):
    plt.close()
    pas = 1.4/NbPoints
    for k in range(1,n*2):
        etha = k/20
        z = -pas
        Z = []
        Ampl = []
        while z <(1.4):
            z += pas
            
            Z.append(z)
            Ampl.append(abs( z**2 / abs((1+alpha*(1+ (z**2/(-z**2+2j*etha*beta*z + beta**2)) ))*z**2-1)))
        plt.plot(Z,Ampl,label=etha)
    plt.legend()
    plt.show()

    
def RessortBode(x,vx,u,vu,dt,durée,A0,w0,w1,w,etha,alpha):
    
    plt.close()
    X = [x] #Liste des positions
    VX = [vx] #Liste des vitesses
    U = [u] #Liste des positions
    VU = [vu] #Liste des vitesses
    T = [0]  #Liste des temps
    #Em = [(1/2)*(m*v0**2 + k*(x0-l0)**2)]
    t=0
    
    while t<=durée:
        x = x + vx * dt
        u = u + vu * dt
        
        ax = 2*alpha*etha*w1*vu + w1**2*alpha*u-w0**2*x+A0*ma.cos(w*t)
        au = -ax - 2*etha*w1*vu-w1**2*u
        
        vx = vx + ax*dt
        vu = vu + au*dt
        
        t+=dt
        X.append(x)
        VX.append(vx)
        U.append(u)
        VU.append(vu)
        T.append(t)
        #Em.append((1/2)*(m*v**2 + k*(x-l0)**2))
    
    plt.plot(T,X,'r',label='x')
    plt.legend()
    fig = plt.figure()
    plt.plot(T,U,'b',label='u')
    #fig = plt.figure()
    #plt.plot(T,Em,'purple')
    # fig = plt.figure()
    # plt.plot(X,VX,'m')
    print(T[-1])
    print(X)
    plt.show()
